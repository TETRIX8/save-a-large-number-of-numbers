import os
import re
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# Bot token
TOKEN = '–≤–∞—à —Ç–æ–∫–µ–Ω'

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    waiting_for_name = State()  # State for entering name

# Keyboards
vcf_keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å VCF", callback_data="create_vcf"))
instruction_keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="get_instruction"))

# Files for storing data
vip_users_file = 'vip_users.txt'
users_file = 'users.txt'
admin_id = 1404494933  # Admin ID

# Sticker list
STICKERS = [
    'CAACAgIAAxkBAAEH-D1myj2lxMS4WPRtiH0lujLtI-1YMwACVQADr8ZRGmTn_PAl6RC_NQQ',
    'CAACAgIAAxkBAAEH-FdmykDs-8EAAcLr1qZ9HGI5vPT4jDEAAkoDAAK1cdoGwn4G-ptIHsQ1BA'
]

# Variables for storing user names
user_names = {}  # Dictionary for storing user names

def load_vip_users():
    if os.path.exists(vip_users_file):
        with open(vip_users_file, 'r') as f:
            return set(map(int, f.read().split()))
    return set()

def save_vip_users(vip_users):
    with open(vip_users_file, 'w') as f:
        f.write('\n'.join(map(str, vip_users)))

vip_users = load_vip_users()

def load_users():
    if os.path.exists(users_file):
        with open(users_file, 'r') as f:
            return set(map(int, f.read().split()))
    return set()

def save_user(user_id):
    with open(users_file, 'a') as f:
        f.write(f"{user_id}\n")

all_users = load_users()

def random_sticker():
    return random.choice(STICKERS)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id

    if user_id not in all_users:
        all_users.add(user_id)
        save_user(user_id)
        await bot.send_message(admin_id, f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n\n"
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .txt —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏.\n\n"
        "üìù –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –Ω–æ–º–µ—Ä–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.\n"
        "üìá –¢–∞–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å VCF —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /rename."
    )
    await message.reply(welcome_text, reply_markup=instruction_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'get_instruction')
async def get_instruction(callback_query: types.CallbackQuery):
    instruction_text = (
        "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .txt —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n"
        "2Ô∏è‚É£ –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –Ω–æ–º–µ—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n\n"
        "3Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å VCF —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å VCF'.\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/rename` –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
    )
    await bot.send_message(callback_query.from_user.id, instruction_text, parse_mode='Markdown')
    await callback_query.answer()
@dp.message_handler(commands=['instry'])
async def instry_command(message: types.Message):
    instruction_text = (
        "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .txt —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n"
        "2Ô∏è‚É£ –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –Ω–æ–º–µ—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n\n"
        "3Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å VCF —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å VCF'.\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/rename` –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
    )
    await message.reply(instruction_text, parse_mode='Markdown')

@dp.message_handler(commands=['rename'])
async def rename_command(message: types.Message):
    user_id = message.from_user.id
    
    # Retrieve the current name, if set
    current_name = user_names.get(user_id, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # Prompt user for a new name
    await message.reply(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: '{current_name}'"
    )
    
    # Set state to wait for the new name
    await Form.waiting_for_name.set()

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id == admin_id:
        admin_text = (
            "üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
            "/add_vip [user_id] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VIP —Å–ø–∏—Å–æ–∫.\n"
            "/remove_vip [user_id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ VIP —Å–ø–∏—Å–∫–∞.\n"
            "/list_vip - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "/broadcast [message] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )

        # Send random sticker
        sticker_message = await bot.send_sticker(message.from_user.id, random_sticker())

        # Delay for 5 seconds and then delete sticker
        await asyncio.sleep(5)
        await bot.delete_message(message.from_user.id, sticker_message.message_id)

        await message.reply(admin_text)
    else:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message_handler(commands=['add_vip'])
async def add_vip(message: types.Message):
    if message.from_user.id != admin_id:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_vip [user_id].")
        return

    user_id = int(parts[1])
    vip_users.add(user_id)
    save_vip_users(vip_users)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ VIP —Å–ø–∏—Å–æ–∫.")

@dp.message_handler(commands=['remove_vip'])
async def remove_vip(message: types.Message):
    if message.from_user.id != admin_id:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_vip [user_id].")
        return

    user_id = int(parts[1])
    if user_id in vip_users:
        vip_users.remove(user_id)
        save_vip_users(vip_users)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ VIP —Å–ø–∏—Å–∫–∞.")
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ VIP —Å–ø–∏—Å–∫–µ.")

@dp.message_handler(commands=['list_vip'])
async def list_vip(message: types.Message):
    if message.from_user.id != admin_id:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not vip_users:
        await message.reply("üìú VIP —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    vip_list = "\n".join(str(user_id) for user_id in vip_users)
    await message.reply(f"üìú VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{vip_list}")

@dp.message_handler(commands=['broadcast'])
async def broadcast_message(message: types.Message):
    if message.from_user.id != admin_id:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /broadcast [message].")
        return

    broadcast_text = parts[1]

    # Send message to all users
    for user_id in all_users:
        try:
            await bot.send_message(user_id, broadcast_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    document = message.document

    if document.mime_type != 'text/plain':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")
        return

    await document.download(destination_file='numbers.txt')

    with open('numbers.txt', 'r') as file:
        content = file.read()

    if not content.strip():
        await message.reply("‚ùå –§–∞–π–ª –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏.")
        os.remove('numbers.txt')
        return

    numbers = process_numbers(content)

    if not numbers:
        await message.reply("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        os.remove('numbers.txt')
        return

    user_id = message.from_user.id

    # Send random sticker before processing
    sticker_message = await bot.send_sticker(user_id, random_sticker())

    # Delay for 5 seconds and then delete sticker
    await asyncio.sleep(5)
    await bot.delete_message(user_id, sticker_message.message_id)

    if user_id not in vip_users and len(numbers) > 100:
        numbers = numbers[:100]
        await message.reply(
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 100 –Ω–æ–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å. "
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: @TETRIX_UNO"
        )

    sorted_file_name = 'sorted_numbers.txt'
    with open(sorted_file_name, 'w') as sorted_file:
        sorted_file.write('\n'.join(numbers))

    response_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}"
    with open(sorted_file_name, 'rb') as sorted_file:
        await message.reply_document(sorted_file, caption=response_message, reply_markup=vcf_keyboard)

    os.remove('numbers.txt')

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    content = message.text

    numbers = process_numbers(content)

    if not numbers:
        await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    user_id = message.from_user.id

    # Send random sticker before processing
    sticker_message = await bot.send_sticker(user_id, random_sticker())

    # Delay for 5 seconds and then delete sticker
    await asyncio.sleep(5)
    await bot.delete_message(user_id, sticker_message.message_id)

    if user_id not in vip_users and len(numbers) > 100:
        numbers = numbers[:100]
        await message.reply(
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 100 –Ω–æ–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å. "
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: @TETRIX_UNO"
        )

    sorted_file_name = 'sorted_numbers.txt'
    with open(sorted_file_name, 'w') as sorted_file:
        sorted_file.write('\n'.join(numbers))

    response_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}"
    with open(sorted_file_name, 'rb') as sorted_file:
        await message.reply_document(sorted_file, caption=response_message, reply_markup=vcf_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'create_vcf')
async def create_vcf(callback_query: types.CallbackQuery):
    sorted_file_name = 'sorted_numbers.txt'
    vcf_filename = 'contacts.vcf'

    if not os.path.exists(sorted_file_name):
        await bot.send_message(callback_query.from_user.id, "‚ùå –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏.")
        return

    user_id = callback_query.from_user.id
    name = user_names.get(user_id, '–ö–ª–∏–µ–Ω—Ç—ã')  # Default to '–ö–ª–∏–µ–Ω—Ç—ã' if name is not set

    with open(sorted_file_name, 'r') as f:
        lines = f.readlines()

    with open(vcf_filename, 'w') as vcf:
        for line in lines:
            client_number = line.strip()
            if re.match(r'^\+?\d+$', client_number):
                unique_id = str(hash(client_number))[-5:]
                vcf.write(f"BEGIN:VCARD\nVERSION:3.0\nFN:{name} {client_number}\nTEL;TYPE=CELL:{client_number}\nUID:{unique_id}\nEND:VCARD\n")

    if os.path.getsize(vcf_filename) == 0:
        await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VCF —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤.")
        os.remove(vcf_filename)
        return

    # Send random sticker when creating VCF
    sticker_message = await bot.send_sticker(callback_query.from_user.id, random_sticker())

    # Delay for 5 seconds and then delete sticker
    await asyncio.sleep(5)
    await bot.delete_message(callback_query.from_user.id, sticker_message.message_id)

    with open(vcf_filename, 'rb') as vcf:
        await bot.send_document(
            callback_query.from_user.id,
            vcf,
            caption="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª –¥–ª—è –µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        )

    os.remove(vcf_filename)
    await callback_query.answer()

@dp.message_handler(state=Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()

    if not user_name:
        await message.reply("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")
        return

    user_names[user_id] = user_name
    

    # Send confirmation message with the current name
    await message.reply(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: '{user_name}' .\n"
     f"üëå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ù–æ–º–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ "                   )

    await state.finish()

def process_numbers(content):
    """Function to process, clean, and sort numbers"""
    numbers = sorted(set(re.sub(r'\D', '', number) for number in content.split(",") if number.strip() and re.sub(r'\D', '', number)))
    numbers = [number for number in numbers if re.match(r'^\d+$', number)]
    return numbers

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

